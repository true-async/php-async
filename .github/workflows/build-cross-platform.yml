name: Cross-Platform Build

on:
  push:
    branches: [build]
  pull_request:
    branches: [build]

jobs:
  ubuntu-build:
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:8.3
        env:
          MYSQL_ROOT_PASSWORD: ''
          MYSQL_ALLOW_EMPTY_PASSWORD: yes
          MYSQL_DATABASE: test
        ports: ['3306:3306']
        options: >-
          --health-cmd="mysqladmin ping --silent"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

      postgres:
        image: postgres:16
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test
        ports: ['5432:5432']
        options: >-
          --health-cmd="pg_isready"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
      - name: Checkout php-async repo
        uses: actions/checkout@v4
        with:
          path: async

      - name: Clone php-src (true-async-stable)
        run: |
          git clone --depth=1 --branch=true-async-stable https://github.com/true-async/php-src php-src

      - name: Copy php-async extension into php-src
        run: |
          mkdir -p php-src/ext/async
          cp -r async/* php-src/ext/async/

      - name: Install build dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            gcc g++ autoconf bison re2c \
            libgmp-dev libicu-dev libtidy-dev libsasl2-dev \
            libzip-dev libbz2-dev libsqlite3-dev libonig-dev libcurl4-openssl-dev \
            libxml2-dev libxslt1-dev libpq-dev libreadline-dev libldap2-dev libsodium-dev \
            libargon2-dev \
            firebird-dev \
            valgrind cmake

      - name: Install LibUV >= 1.44.0
        run: |
          # Check if system libuv meets requirements
          if pkg-config --exists libuv && pkg-config --atleast-version=1.44.0 libuv; then
            echo "System libuv version: $(pkg-config --modversion libuv)"
            sudo apt-get install -y libuv1-dev
          else
            echo "Installing LibUV 1.44.0 from source"
            wget https://github.com/libuv/libuv/archive/v1.44.0.tar.gz
            tar -xzf v1.44.0.tar.gz
            cd libuv-1.44.0
            mkdir build && cd build
            cmake .. -DCMAKE_BUILD_TYPE=Release
            make -j$(nproc)
            sudo make install
            sudo ldconfig
            cd ../..
          fi

      - name: Configure PHP
        working-directory: php-src
        run: |
          ./buildconf -f
          ./configure \
            --enable-zts \
            --enable-fpm \
            --enable-opcache \
            --with-pdo-mysql=mysqlnd \
            --with-mysqli=mysqlnd \
            --with-pgsql \
            --with-pdo-pgsql \
            --with-pdo-sqlite \
            --enable-intl \
            --without-pear \
            --with-zip \
            --with-zlib \
            --enable-soap \
            --enable-xmlreader \
            --with-xsl \
            --with-tidy \
            --enable-sysvsem \
            --enable-sysvshm \
            --enable-shmop \
            --enable-pcntl \
            --with-readline \
            --enable-mbstring \
            --with-curl \
            --with-gettext \
            --enable-sockets \
            --with-bz2 \
            --with-openssl \
            --with-gmp \
            --enable-bcmath \
            --enable-calendar \
            --enable-ftp \
            --enable-sysvmsg \
            --with-ffi \
            --enable-zend-test \
            --enable-dl-test=shared \
            --with-ldap \
            --with-ldap-sasl \
            --with-password-argon2 \
            --with-mhash \
            --with-sodium \
            --enable-dba \
            --with-cdb \
            --enable-flatfile \
            --enable-inifile \
            --with-config-file-path=/etc \
            --with-config-file-scan-dir=/etc/php.d \
            --with-pdo-firebird \
            --enable-address-sanitizer \          
            --enable-async

      - name: Build PHP
        working-directory: php-src
        run: |
          make -j"$(nproc)"
          sudo make install
          sudo mkdir -p /etc/php.d
          sudo chmod 777 /etc/php.d
          {
            echo "opcache.enable_cli=1"
            echo "opcache.protect_memory=1"
          } > /etc/php.d/opcache.ini

      - name: Run tests
        working-directory: php-src/ext/async
        run: |
          /usr/local/bin/php -v
          /usr/local/bin/php ../../run-tests.php \
            -d zend_extension=opcache.so \
            -d opcache.enable_cli=1 \
            -d opcache.jit_buffer_size=64M \
            -d opcache.jit=tracing \
            -d zend_test.observer.enabled=1 \
            -d zend_test.observer.show_output=0 \
            -P -q -x -j4 \
            -g FAIL,BORK,LEAK,XLEAK \
            --no-progress \
            --offline \
            --show-diff \
            --show-slow 4000 \
            --set-timeout 120 \
            --repeat 2

  cross-platform-build:
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest, macos-latest]
        include:
          - os: windows-latest  
            platform: windows
          - os: macos-latest
            platform: macos
    
    runs-on: ${{ matrix.os }}
    
    env:
      # Windows specific environment (only for windows)
      PHP_BUILD_CACHE_BASE_DIR: ${{ matrix.os == 'windows-latest' && 'C:\build-cache' || '' }}
      PHP_BUILD_OBJ_DIR: ${{ matrix.os == 'windows-latest' && 'C:\obj' || '' }}
      PHP_BUILD_CACHE_SDK_DIR: ${{ matrix.os == 'windows-latest' && 'C:\build-cache\sdk' || '' }}
      PHP_BUILD_SDK_BRANCH: ${{ matrix.os == 'windows-latest' && 'php-sdk-2.3.0' || '' }}
      PHP_BUILD_CRT: ${{ matrix.os == 'windows-latest' && 'vs17' || '' }}
      PLATFORM: ${{ matrix.os == 'windows-latest' && 'x64' || '' }}
      THREAD_SAFE: ${{ matrix.os == 'windows-latest' && '1' || '' }}


    steps:
      - name: Checkout php-async repo
        uses: actions/checkout@v4
        with:
          path: async

      - name: Clone php-src (true-async-stable)
        run: |
          git clone --depth=1 --branch=true-async-stable https://github.com/true-async/php-src php-src

      - name: Copy php-async extension into php-src
        run: |
          mkdir -p php-src/ext/async
          cp -r async/* php-src/ext/async/

      # ==================== WINDOWS BUILD (Official PHP approach) ====================
      - name: git config
        if: matrix.os == 'windows-latest'
        run: git config --global core.autocrlf false && git config --global core.eol lf

      - name: Create build task (Windows)
        if: matrix.os == 'windows-latest'
        working-directory: php-src
        shell: cmd
        run: |
          echo @echo off > buildtask.bat
          echo echo Building PHP with async extension... >> buildtask.bat
          echo. >> buildtask.bat
          echo REM Update dependencies >> buildtask.bat
          echo phpsdk_deps --update --no-backup --branch master --stability staging --deps "%PHP_BUILD_CACHE_BASE_DIR%\deps" --crt %PHP_BUILD_CRT% >> buildtask.bat
          echo if %%errorlevel%% neq 0 exit /b 3 >> buildtask.bat
          echo. >> buildtask.bat
          echo REM Build configure >> buildtask.bat
          echo buildconf.bat --force >> buildtask.bat
          echo if %%errorlevel%% neq 0 exit /b 3 >> buildtask.bat
          echo. >> buildtask.bat
          echo REM Configure PHP with async >> buildtask.bat
          echo configure.bat --enable-snapshot-build --disable-debug-pack --without-analyzer --enable-object-out-dir=%PHP_BUILD_OBJ_DIR% --with-php-build="%PHP_BUILD_CACHE_BASE_DIR%\deps" --enable-async --enable-zts >> buildtask.bat
          echo if %%errorlevel%% neq 0 exit /b 3 >> buildtask.bat
          echo. >> buildtask.bat
          echo REM Build >> buildtask.bat
          echo nmake /NOLOGO >> buildtask.bat
          echo if %%errorlevel%% neq 0 exit /b 3 >> buildtask.bat

      - name: Windows Build
        if: matrix.os == 'windows-latest'
        working-directory: php-src
        shell: cmd
        run: |
          REM Create build directories
          if not exist "%PHP_BUILD_CACHE_BASE_DIR%" mkdir "%PHP_BUILD_CACHE_BASE_DIR%"
          if not exist "%PHP_BUILD_OBJ_DIR%" mkdir "%PHP_BUILD_OBJ_DIR%"
          
          REM Setup SDK 
          set SDK_REMOTE=https://github.com/php/php-sdk-binary-tools.git
          set SDK_BRANCH=%PHP_BUILD_SDK_BRANCH%
          set SDK_RUNNER=%PHP_BUILD_CACHE_SDK_DIR%\phpsdk-%PHP_BUILD_CRT%-%PLATFORM%.bat
          
          REM Clone SDK if needed
          if not exist "%PHP_BUILD_CACHE_SDK_DIR%" (
            echo Cloning PHP SDK...
            git clone --branch %SDK_BRANCH% %SDK_REMOTE% --depth 1 "%PHP_BUILD_CACHE_SDK_DIR%"
          )
          
          REM Check SDK runner exists
          if not exist "%SDK_RUNNER%" (
            echo SDK runner not found: %SDK_RUNNER%
            dir "%PHP_BUILD_CACHE_SDK_DIR%"
            exit /b 1
          )
          
          REM Run PHP SDK and build
          echo Running SDK: %SDK_RUNNER%
          call "%SDK_RUNNER%" -t buildtask.bat

      # ==================== MACOS DEPENDENCIES (Official PHP approach) ====================
      - name: Install build dependencies (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          set -x
          
          # Patch brew to overwrite always (from official PHP workflow)
          formula_installer="$(brew --repo)"/Library/Homebrew/formula_installer.rb
          code=" keg.link\(verbose: verbose\?"
          sudo sed -Ei '' "s/$code.*/$code, overwrite: true\)/" "$formula_installer"
          
          # Install core dependencies (official PHP list + libuv for async)
          brew reinstall autoconf webp tidy-html5 libzip libsodium icu4c curl
          brew install \
            bison \
            re2c \
            libuv
          brew install \
            bzip2 \
            enchant \
            libffi \
            intltool \
            libiconv \
            t1lib \
            libxml2 \
            libjpeg \
            libxslt
          
          # Verify LibUV version
          pkg-config --modversion libuv || echo "LibUV not found"

      # ==================== MACOS CONFIGURE & BUILD ====================
      - name: Configure PHP (macOS)
        if: matrix.os == 'macos-latest'
        working-directory: php-src
        run: |
          set -x
          
          # Setup environment (official PHP approach)
          BREW_OPT="$(brew --prefix)"/opt
          export PATH="$BREW_OPT/bison/bin:$PATH"
          export PKG_CONFIG_PATH="$PKG_CONFIG_PATH:$BREW_OPT/openssl@1.1/lib/pkgconfig"
          export PKG_CONFIG_PATH="$PKG_CONFIG_PATH:$BREW_OPT/curl/lib/pkgconfig"
          export PKG_CONFIG_PATH="$PKG_CONFIG_PATH:$BREW_OPT/libffi/lib/pkgconfig"
          export PKG_CONFIG_PATH="$PKG_CONFIG_PATH:$BREW_OPT/libxml2/lib/pkgconfig"
          export PKG_CONFIG_PATH="$PKG_CONFIG_PATH:$BREW_OPT/libxslt/lib/pkgconfig"
          export PKG_CONFIG_PATH="$PKG_CONFIG_PATH:$BREW_OPT/zlib/lib/pkgconfig"
          export PKG_CONFIG_PATH="$PKG_CONFIG_PATH:$BREW_OPT/icu4c/lib/pkgconfig"
          
          # Fix curl pkg-config (official PHP approach)
          sed -i -e 's/Requires.private:.*//g' "$BREW_OPT/curl/lib/pkgconfig/libcurl.pc"
          
          # Check async extension exists
          ls -la ext/async/
          
          # Build configure
          ./buildconf --force
          
          # Configure with official PHP options + async
          ./configure \
            --enable-option-checking=fatal \
            --prefix=/usr/local \
            --enable-fpm \
            --with-pdo-mysql=mysqlnd \
            --with-mysqli=mysqlnd \
            --with-pdo-sqlite \
            --without-pear \
            --enable-gd \
            --with-jpeg \
            --with-webp \
            --with-freetype \
            --enable-exif \
            --with-zip \
            --with-zlib \
            --enable-soap \
            --enable-xmlreader \
            --with-xsl \
            --with-tidy="$BREW_OPT"/tidy-html5 \
            --with-libxml \
            --enable-sysvsem \
            --enable-sysvshm \
            --enable-shmop \
            --enable-pcntl \
            --with-readline="$BREW_OPT"/readline \
            --enable-mbstring \
            --with-curl \
            --with-gettext="$BREW_OPT"/gettext \
            --enable-sockets \
            --with-bz2="$BREW_OPT"/bzip2 \
            --with-openssl \
            --with-gmp="$BREW_OPT"/gmp \
            --with-iconv="$BREW_OPT"/libiconv \
            --enable-bcmath \
            --enable-calendar \
            --enable-ftp \
            --enable-sysvmsg \
            --with-ffi \
            --enable-zend-test \
            --enable-dl-test=shared \
            --enable-intl \
            --with-mhash \
            --with-sodium \
            --enable-dba \
            --with-config-file-path=/etc \
            --with-config-file-scan-dir=/etc/php.d \
            --enable-async

      - name: Build PHP (macOS)
        if: matrix.os == 'macos-latest'
        working-directory: php-src
        run: |
          make -j"$(sysctl -n hw.ncpu)"
          sudo make install
          sudo mkdir -p /usr/local/etc/php.d
          sudo chmod 777 /usr/local/etc/php.d
          {
            echo "opcache.enable_cli=1"
            echo "opcache.protect_memory=1"
          } > /usr/local/etc/php.d/opcache.ini

      # ==================== TESTING FOR ALL PLATFORMS ====================
      - name: Run tests (Windows)
        if: matrix.os == 'windows-latest'
        working-directory: php-src/ext/async
        run: |
          REM Check PHP version and modules
          php.exe -v
          php.exe -m
          REM Check for async functions
          php.exe -r "echo 'Async namespace: ' . (class_exists('Async\\Context') ? 'EXISTS' : 'NOT FOUND') . PHP_EOL;"
          php.exe -r "echo 'spawn function: ' . (function_exists('Async\\spawn') ? 'EXISTS' : 'NOT FOUND') . PHP_EOL;"
          REM Check extension files
          dir ..\..\ | findstr async
          REM Run actual tests
          php.exe ../../run-tests.php ^
            -P -q -x -j4 ^
            -g FAIL,BORK,LEAK,XLEAK ^
            --no-progress ^
            --offline ^
            --show-diff ^
            --show-slow 4000 ^
            --set-timeout 120 ^
            --repeat 2
        shell: cmd

      - name: Run tests (macOS)
        if: matrix.os == 'macos-latest'
        working-directory: php-src/ext/async
        run: |
          /usr/local/bin/php -v
          /usr/local/bin/php ../../run-tests.php \
            -d zend_extension=opcache.so \
            -d opcache.enable_cli=1 \
            -d opcache.jit_buffer_size=64M \
            -d opcache.jit=tracing \
            -d zend_test.observer.enabled=1 \
            -d zend_test.observer.show_output=0 \
            -P -q -x -j4 \
            -g FAIL,BORK,LEAK,XLEAK \
            --no-progress \
            --offline \
            --show-diff \
            --show-slow 4000 \
            --set-timeout 120 \
            --repeat 2