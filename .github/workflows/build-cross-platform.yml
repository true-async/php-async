name: Cross-Platform Build

on:
  push:
    branches: [build]
  pull_request:
    branches: [build]

jobs:
  ubuntu-build:
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:8.3
        env:
          MYSQL_ROOT_PASSWORD: ''
          MYSQL_ALLOW_EMPTY_PASSWORD: yes
          MYSQL_DATABASE: test
        ports: ['3306:3306']
        options: >-
          --health-cmd="mysqladmin ping --silent"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

      postgres:
        image: postgres:16
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test
        ports: ['5432:5432']
        options: >-
          --health-cmd="pg_isready"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
      - name: Checkout php-async repo
        uses: actions/checkout@v4
        with:
          path: async

      - name: Clone php-src (true-async-stable)
        run: |
          git clone --depth=1 --branch=true-async-stable https://github.com/true-async/php-src php-src

      - name: Copy php-async extension into php-src
        run: |
          mkdir -p php-src/ext/async
          cp -r async/* php-src/ext/async/

      - name: Install build dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            gcc g++ autoconf bison re2c \
            libgmp-dev libicu-dev libtidy-dev libsasl2-dev \
            libzip-dev libbz2-dev libsqlite3-dev libonig-dev libcurl4-openssl-dev \
            libxml2-dev libxslt1-dev libpq-dev libreadline-dev libldap2-dev libsodium-dev \
            libargon2-dev \
            firebird-dev \
            valgrind cmake

      - name: Install LibUV >= 1.44.0
        run: |
          # Check if system libuv meets requirements
          if pkg-config --exists libuv && pkg-config --atleast-version=1.44.0 libuv; then
            echo "System libuv version: $(pkg-config --modversion libuv)"
            sudo apt-get install -y libuv1-dev
          else
            echo "Installing LibUV 1.44.0 from source"
            wget https://github.com/libuv/libuv/archive/v1.44.0.tar.gz
            tar -xzf v1.44.0.tar.gz
            cd libuv-1.44.0
            mkdir build && cd build
            cmake .. -DCMAKE_BUILD_TYPE=Release
            make -j$(nproc)
            sudo make install
            sudo ldconfig
            cd ../..
          fi

      - name: Configure PHP
        working-directory: php-src
        run: |
          ./buildconf -f
          ./configure \
            --enable-zts \
            --enable-fpm \
            --enable-opcache \
            --with-pdo-mysql=mysqlnd \
            --with-mysqli=mysqlnd \
            --with-pgsql \
            --with-pdo-pgsql \
            --with-pdo-sqlite \
            --enable-intl \
            --without-pear \
            --with-zip \
            --with-zlib \
            --enable-soap \
            --enable-xmlreader \
            --with-xsl \
            --with-tidy \
            --enable-sysvsem \
            --enable-sysvshm \
            --enable-shmop \
            --enable-pcntl \
            --with-readline \
            --enable-mbstring \
            --with-curl \
            --with-gettext \
            --enable-sockets \
            --with-bz2 \
            --with-openssl \
            --with-gmp \
            --enable-bcmath \
            --enable-calendar \
            --enable-ftp \
            --enable-sysvmsg \
            --with-ffi \
            --enable-zend-test \
            --enable-dl-test=shared \
            --with-ldap \
            --with-ldap-sasl \
            --with-password-argon2 \
            --with-mhash \
            --with-sodium \
            --enable-dba \
            --with-cdb \
            --enable-flatfile \
            --enable-inifile \
            --with-config-file-path=/etc \
            --with-config-file-scan-dir=/etc/php.d \
            --with-pdo-firebird \
            --enable-address-sanitizer \          
            --enable-async

      - name: Build PHP
        working-directory: php-src
        run: |
          make -j"$(nproc)"
          sudo make install
          sudo mkdir -p /etc/php.d
          sudo chmod 777 /etc/php.d
          {
            echo "opcache.enable_cli=1"
            echo "opcache.protect_memory=1"
          } > /etc/php.d/opcache.ini

      - name: Run tests
        working-directory: php-src/ext/async
        run: |
          /usr/local/bin/php -v
          /usr/local/bin/php ../../run-tests.php \
            -d zend_extension=opcache.so \
            -d opcache.enable_cli=1 \
            -d opcache.jit_buffer_size=64M \
            -d opcache.jit=tracing \
            -d zend_test.observer.enabled=1 \
            -d zend_test.observer.show_output=0 \
            -P -q -x -j4 \
            -g FAIL,BORK,LEAK,XLEAK \
            --no-progress \
            --offline \
            --show-diff \
            --show-slow 4000 \
            --set-timeout 120 \
            --repeat 2

  cross-platform-build:
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest, macos-latest]
        include:
          - os: windows-latest  
            platform: windows
          - os: macos-latest
            platform: macos
    
    runs-on: ${{ matrix.os }}


    steps:
      - name: Checkout php-async repo
        uses: actions/checkout@v4
        with:
          path: async

      - name: Clone php-src (true-async-stable)
        run: |
          git clone --depth=1 --branch=true-async-stable https://github.com/true-async/php-src php-src

      - name: Copy php-async extension into php-src
        run: |
          mkdir -p php-src/ext/async
          cp -r async/* php-src/ext/async/

      # ==================== WINDOWS DEPENDENCIES ====================
      - name: Install build dependencies (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          # Install php-sdk
          git clone https://github.com/Microsoft/php-sdk-binary-tools.git C:\php-sdk
          
          # Install vcpkg and LibUV >= 1.44.0
          git clone https://github.com/Microsoft/vcpkg.git C:\vcpkg
          C:\vcpkg\bootstrap-vcpkg.bat
          C:\vcpkg\vcpkg.exe install libuv:x64-windows
          
          # Verify LibUV version
          C:\vcpkg\vcpkg.exe list libuv
          
          # Create deps structure for php-sdk
          mkdir C:\php-sdk\deps\include\libuv
          mkdir C:\php-sdk\deps\lib
          
          # Copy LibUV files
          xcopy /E /I C:\vcpkg\installed\x64-windows\include C:\php-sdk\deps\include\libuv\
          copy C:\vcpkg\installed\x64-windows\lib\uv.lib C:\php-sdk\deps\lib\libuv.lib
        shell: cmd

      # ==================== MACOS DEPENDENCIES ====================
      - name: Install build dependencies (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          # Install required packages (force reinstall if needed)
          brew install autoconf || brew reinstall autoconf
          brew install libuv || brew reinstall libuv
          brew install icu4c || brew reinstall icu4c
          brew install openssl@3 || brew reinstall openssl@3
          
          # Verify LibUV version
          pkg-config --modversion libuv || echo "LibUV not found"
          
          # Setup environment variables for keg-only packages  
          echo "PKG_CONFIG_PATH=$(brew --prefix openssl@3)/lib/pkgconfig:$(brew --prefix icu4c)/lib/pkgconfig:$PKG_CONFIG_PATH" >> $GITHUB_ENV
          echo "CPPFLAGS=-I$(brew --prefix openssl@3)/include -I$(brew --prefix icu4c)/include" >> $GITHUB_ENV
          echo "LDFLAGS=-L$(brew --prefix openssl@3)/lib -L$(brew --prefix icu4c)/lib" >> $GITHUB_ENV
          
          # Debug info
          echo "Autoconf version: $(autoconf --version | head -1)"
          echo "LibUV version: $(pkg-config --modversion libuv || echo 'N/A')"

      # ==================== WINDOWS CONFIGURE & BUILD ====================
      - name: Configure and Build PHP (Windows)
        if: matrix.os == 'windows-latest'
        working-directory: php-src
        run: |
          REM Setup PHP SDK environment properly
          call C:\php-sdk\phpsdk-vs17-x64.bat
          
          REM Set UTF-8 encoding
          chcp 65001
          
          REM Clean previous build
          nmake clean
          
          REM Check if async extension exists
          dir ext\async
          
          REM Build configuration files
          call buildconf.bat
          
          REM Configure with your working options (without debug-pack)
          call configure.bat --enable-phpdbg --enable-async --enable-pdo --with-pdo-mysql --enable-sockets --with-sqlite3 --with-curl --enable-ftp
          
          REM Build
          nmake
        shell: cmd

      # ==================== MACOS CONFIGURE & BUILD ====================
      - name: Configure PHP (macOS)
        if: matrix.os == 'macos-latest'
        working-directory: php-src
        run: |
          # Debug environment
          echo "PATH: $PATH"
          echo "PKG_CONFIG_PATH: $PKG_CONFIG_PATH"
          which autoconf || echo "autoconf not found"
          autoconf --version || echo "autoconf version failed"
          
          # Check async extension
          ls -la ext/async/ || echo "async directory not found"
          
          # Build configure
          echo "Running buildconf..."
          ./buildconf -f || { echo "buildconf failed"; exit 1; }
          
          # Test simple configure first
          echo "Testing minimal configure..."
          ./configure --help | head -20
          
          # Configure with absolute minimal options
          echo "Running configure..."
          ./configure \
            --disable-all \
            --enable-cli \
            --enable-async || { echo "configure failed"; cat config.log | tail -50; exit 1; }

      - name: Build PHP (macOS)
        if: matrix.os == 'macos-latest'
        working-directory: php-src
        run: |
          make -j"$(sysctl -n hw.ncpu)"
          sudo make install
          sudo mkdir -p /usr/local/etc/php.d
          sudo chmod 777 /usr/local/etc/php.d
          {
            echo "opcache.enable_cli=1"
            echo "opcache.protect_memory=1"
          } > /usr/local/etc/php.d/opcache.ini

      # ==================== TESTING FOR ALL PLATFORMS ====================
      - name: Run tests (Windows)
        if: matrix.os == 'windows-latest'
        working-directory: php-src/ext/async
        run: |
          REM Check PHP version and modules
          php.exe -v
          php.exe -m
          REM Check for async functions
          php.exe -r "echo 'Async namespace: ' . (class_exists('Async\\Context') ? 'EXISTS' : 'NOT FOUND') . PHP_EOL;"
          php.exe -r "echo 'spawn function: ' . (function_exists('Async\\spawn') ? 'EXISTS' : 'NOT FOUND') . PHP_EOL;"
          REM Check extension files
          dir ..\..\ | findstr async
          REM Run actual tests
          php.exe ../../run-tests.php ^
            -P -q -x -j4 ^
            -g FAIL,BORK,LEAK,XLEAK ^
            --no-progress ^
            --offline ^
            --show-diff ^
            --show-slow 4000 ^
            --set-timeout 120 ^
            --repeat 2
        shell: cmd

      - name: Run tests (macOS)
        if: matrix.os == 'macos-latest'
        working-directory: php-src/ext/async
        run: |
          /usr/local/bin/php -v
          /usr/local/bin/php ../../run-tests.php \
            -d zend_extension=opcache.so \
            -d opcache.enable_cli=1 \
            -d opcache.jit_buffer_size=64M \
            -d opcache.jit=tracing \
            -d zend_test.observer.enabled=1 \
            -d zend_test.observer.show_output=0 \
            -P -q -x -j4 \
            -g FAIL,BORK,LEAK,XLEAK \
            --no-progress \
            --offline \
            --show-diff \
            --show-slow 4000 \
            --set-timeout 120 \
            --repeat 2